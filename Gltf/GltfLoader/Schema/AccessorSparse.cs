//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GltfLoader.Schema
{
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class AccessorSparse
    {
        
        /// <summary>
        /// Backing field for Count.
        /// </summary>
        private int _count;
        
        /// <summary>
        /// Backing field for Indices.
        /// </summary>
        private AccessorSparseIndices _indices;
        
        /// <summary>
        /// Backing field for Values.
        /// </summary>
        private AccessorSparseValues _values;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras _extras;
        
        /// <summary>
        /// Number of entries stored in the sparse array.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("count")]
        public int Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((value < 1F))
                {
                    throw new System.ArgumentOutOfRangeException("Count", value, "Expected value to be greater than or equal to 1");
                }
                this._count = value;
            }
        }
        
        /// <summary>
        /// Index array of size `count` that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("indices")]
        public AccessorSparseIndices Indices
        {
            get
            {
                return this._indices;
            }
            set
            {
                this._indices = value;
            }
        }
        
        /// <summary>
        /// Array of size `count` times number of components, storing the displaced accessor attributes pointed by `indices`. Substituted values must have the same `componentType` and number of components as the base accessor.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("values")]
        public AccessorSparseValues Values
        {
            get
            {
                return this._values;
            }
            set
            {
                this._values = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions
        {
            get
            {
                return this._extensions;
            }
            set
            {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras
        {
            get
            {
                return this._extras;
            }
            set
            {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeIndices()
        {
            return ((_indices == null) 
                        == false);
        }
        
        public bool ShouldSerializeValues()
        {
            return ((_values == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions()
        {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras()
        {
            return ((_extras == null) 
                        == false);
        }
    }
}
