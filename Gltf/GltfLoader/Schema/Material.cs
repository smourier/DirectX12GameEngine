//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GltfLoader.Schema
{
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class Material
    {
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras _extras;
        
        /// <summary>
        /// Backing field for Pbrmetallicroughness.
        /// </summary>
        private MaterialPbrMetallicRoughness _pbrmetallicroughness;
        
        /// <summary>
        /// Backing field for Normaltexture.
        /// </summary>
        private MaterialNormalTextureInfo _normaltexture;
        
        /// <summary>
        /// Backing field for Occlusiontexture.
        /// </summary>
        private MaterialOcclusionTextureInfo _occlusiontexture;
        
        /// <summary>
        /// Backing field for Emissivetexture.
        /// </summary>
        private TextureInfo _emissivetexture;
        
        /// <summary>
        /// Backing field for Emissivefactor.
        /// </summary>
        private float[] _emissivefactor = new float[] {
                0F,
                0F,
                0F};
        
        /// <summary>
        /// Backing field for Alphamode.
        /// </summary>
        private GltfAlphamode _alphamode = GltfAlphamode.Opaque;
        
        /// <summary>
        /// Backing field for Alphacutoff.
        /// </summary>
        private float _alphacutoff = 0.5F;
        
        /// <summary>
        /// Backing field for Doublesided.
        /// </summary>
        private bool _doublesided = false;
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions
        {
            get
            {
                return this._extensions;
            }
            set
            {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras
        {
            get
            {
                return this._extras;
            }
            set
            {
                this._extras = value;
            }
        }
        
        /// <summary>
        /// A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pbrMetallicRoughness")]
        public MaterialPbrMetallicRoughness Pbrmetallicroughness
        {
            get
            {
                return this._pbrmetallicroughness;
            }
            set
            {
                this._pbrmetallicroughness = value;
            }
        }
        
        /// <summary>
        /// The normal map texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("normalTexture")]
        public MaterialNormalTextureInfo Normaltexture
        {
            get
            {
                return this._normaltexture;
            }
            set
            {
                this._normaltexture = value;
            }
        }
        
        /// <summary>
        /// The occlusion map texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("occlusionTexture")]
        public MaterialOcclusionTextureInfo Occlusiontexture
        {
            get
            {
                return this._occlusiontexture;
            }
            set
            {
                this._occlusiontexture = value;
            }
        }
        
        /// <summary>
        /// The emissive map texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("emissiveTexture")]
        public TextureInfo Emissivetexture
        {
            get
            {
                return this._emissivetexture;
            }
            set
            {
                this._emissivetexture = value;
            }
        }
        
        /// <summary>
        /// The emissive color of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("emissiveFactor")]
        public float[] Emissivefactor
        {
            get
            {
                return this._emissivefactor;
            }
            set
            {
                if ((value == null))
                {
                    this._emissivefactor = value;
                    return;
                }
                if ((value.Length < 3u))
                {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 3u))
                {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] < 0F))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] > 1F))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this._emissivefactor = value;
            }
        }
        
        /// <summary>
        /// The alpha rendering mode of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("alphaMode")]
        public GltfAlphamode Alphamode
        {
            get
            {
                return this._alphamode;
            }
            set
            {
                this._alphamode = value;
            }
        }
        
        /// <summary>
        /// The alpha cutoff value of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("alphaCutoff")]
        public float Alphacutoff
        {
            get
            {
                return this._alphacutoff;
            }
            set
            {
                if ((value < 0F))
                {
                    throw new System.ArgumentOutOfRangeException("Alphacutoff", value, "Expected value to be greater than or equal to 0");
                }
                this._alphacutoff = value;
            }
        }
        
        /// <summary>
        /// Specifies whether the material is double sided.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doubleSided")]
        public bool Doublesided
        {
            get
            {
                return this._doublesided;
            }
            set
            {
                this._doublesided = value;
            }
        }
        
        public bool ShouldSerializeName()
        {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions()
        {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras()
        {
            return ((_extras == null) 
                        == false);
        }
        
        public bool ShouldSerializePbrmetallicroughness()
        {
            return ((_pbrmetallicroughness == null) 
                        == false);
        }
        
        public bool ShouldSerializeNormaltexture()
        {
            return ((_normaltexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeOcclusiontexture()
        {
            return ((_occlusiontexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeEmissivetexture()
        {
            return ((_emissivetexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeEmissivefactor()
        {
            return (_emissivefactor.SequenceEqual(new float[] {
                        0F,
                        0F,
                        0F}) == false);
        }
        
        public bool ShouldSerializeAlphamode()
        {
            return ((_alphamode == GltfAlphamode.Opaque) 
                        == false);
        }
        
        public bool ShouldSerializeAlphacutoff()
        {
            return ((_alphacutoff == 0.5F) 
                        == false);
        }
        
        public bool ShouldSerializeDoublesided()
        {
            return ((_doublesided == false) 
                        == false);
        }
        
        public enum GltfAlphamode
        {
            
            Opaque,
            
            Mask,
            
            Blend,
        }
    }
}
