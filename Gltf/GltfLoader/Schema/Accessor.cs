//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GltfLoader.Schema
{
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class Accessor
    {
        
        /// <summary>
        /// Backing field for Bufferview.
        /// </summary>
        private System.Nullable<int> _bufferview;
        
        /// <summary>
        /// Backing field for Byteoffset.
        /// </summary>
        private int _byteoffset = 0;
        
        /// <summary>
        /// Backing field for Componenttype.
        /// </summary>
        private GltfComponenttype _componenttype;
        
        /// <summary>
        /// Backing field for Normalized.
        /// </summary>
        private bool _normalized = false;
        
        /// <summary>
        /// Backing field for Count.
        /// </summary>
        private int _count;
        
        /// <summary>
        /// Backing field for Type.
        /// </summary>
        private GltfType _type;
        
        /// <summary>
        /// Backing field for Max.
        /// </summary>
        private float[] _max;
        
        /// <summary>
        /// Backing field for Min.
        /// </summary>
        private float[] _min;
        
        /// <summary>
        /// Backing field for Sparse.
        /// </summary>
        private AccessorSparse _sparse;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras _extras;
        
        /// <summary>
        /// The index of the bufferView.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bufferView")]
        public System.Nullable<int> Bufferview
        {
            get
            {
                return this._bufferview;
            }
            set
            {
                if ((value < 0F))
                {
                    throw new System.ArgumentOutOfRangeException("Bufferview", value, "Expected value to be greater than or equal to 0");
                }
                this._bufferview = value;
            }
        }
        
        /// <summary>
        /// The offset relative to the start of the bufferView in bytes.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("byteOffset")]
        public int Byteoffset
        {
            get
            {
                return this._byteoffset;
            }
            set
            {
                if ((value < 0F))
                {
                    throw new System.ArgumentOutOfRangeException("Byteoffset", value, "Expected value to be greater than or equal to 0");
                }
                this._byteoffset = value;
            }
        }
        
        /// <summary>
        /// The datatype of components in the attribute.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("componentType")]
        public GltfComponenttype Componenttype
        {
            get
            {
                return this._componenttype;
            }
            set
            {
                this._componenttype = value;
            }
        }
        
        /// <summary>
        /// Specifies whether integer data values should be normalized.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("normalized")]
        public bool Normalized
        {
            get
            {
                return this._normalized;
            }
            set
            {
                this._normalized = value;
            }
        }
        
        /// <summary>
        /// The number of attributes referenced by this accessor.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("count")]
        public int Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((value < 1F))
                {
                    throw new System.ArgumentOutOfRangeException("Count", value, "Expected value to be greater than or equal to 1");
                }
                this._count = value;
            }
        }
        
        /// <summary>
        /// Specifies if the attribute is a scalar, vector, or matrix.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public GltfType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        /// <summary>
        /// Maximum value of each component in this attribute.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("max")]
        public float[] Max
        {
            get
            {
                return this._max;
            }
            set
            {
                if ((value == null))
                {
                    this._max = value;
                    return;
                }
                if ((value.Length < 1u))
                {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 16u))
                {
                    throw new System.ArgumentException("Array too long");
                }
                this._max = value;
            }
        }
        
        /// <summary>
        /// Minimum value of each component in this attribute.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("min")]
        public float[] Min
        {
            get
            {
                return this._min;
            }
            set
            {
                if ((value == null))
                {
                    this._min = value;
                    return;
                }
                if ((value.Length < 1u))
                {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 16u))
                {
                    throw new System.ArgumentException("Array too long");
                }
                this._min = value;
            }
        }
        
        /// <summary>
        /// Sparse storage of attributes that deviate from their initialization value.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sparse")]
        public AccessorSparse Sparse
        {
            get
            {
                return this._sparse;
            }
            set
            {
                this._sparse = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions
        {
            get
            {
                return this._extensions;
            }
            set
            {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras
        {
            get
            {
                return this._extras;
            }
            set
            {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeBufferview()
        {
            return ((_bufferview == null) 
                        == false);
        }
        
        public bool ShouldSerializeByteoffset()
        {
            return ((_byteoffset == 0) 
                        == false);
        }
        
        public bool ShouldSerializeNormalized()
        {
            return ((_normalized == false) 
                        == false);
        }
        
        public bool ShouldSerializeMax()
        {
            return ((_max == null) 
                        == false);
        }
        
        public bool ShouldSerializeMin()
        {
            return ((_min == null) 
                        == false);
        }
        
        public bool ShouldSerializeSparse()
        {
            return ((_sparse == null) 
                        == false);
        }
        
        public bool ShouldSerializeName()
        {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions()
        {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras()
        {
            return ((_extras == null) 
                        == false);
        }
        
        public enum GltfComponenttype
        {
            
            Byte = 5120,
            
            UnsignedByte = 5121,
            
            Short = 5122,
            
            UnsignedShort = 5123,
            
            UnsignedInt = 5125,
            
            Float = 5126,
        }
        
        public enum GltfType
        {
            
            Scalar,
            
            Vec2,
            
            Vec3,
            
            Vec4,
            
            Mat2,
            
            Mat3,
            
            Mat4,
        }
    }
}
